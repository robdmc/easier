============================= test session starts ==============================
platform darwin -- Python 3.12.8, pytest-8.3.5, pluggy-1.6.0 -- /Users/rob/rob/repos/uv_management/ai_2025-07-01/bin/python3
cachedir: .pytest_cache
rootdir: /Users/rob/rob/repos/easier
configfile: pyproject.toml
plugins: docker-3.1.2, anyio-4.9.0, logfire-3.21.2, jaxtyping-0.3.2, langsmith-0.3.45, typeguard-4.4.4
collecting ... collected 88 items / 56 deselected / 32 selected

easier/tests/test_duckcacher.py::test_register_decorator FAILED          [  3%]
easier/tests/test_duckcacher.py::test_register_as_basic FAILED           [  6%]
easier/tests/test_duckcacher.py::test_register_as_function_name_independence FAILED [  9%]

=================================== FAILURES ===================================
___________________________ test_register_decorator ____________________________

temp_db = '/var/folders/x_/xkyvlnxj07v9tf_8sxj2yq8r0000gn/T/tmp6oy4c01k/test.db'

    def test_register_decorator(temp_db):
        """Test that the register decorator correctly stores and returns dataframes."""
        # Create a new DuckCacher instance with temporary database
        cache = DuckCacher(temp_db)
    
        # Create a test function that returns a mixed dataframe
        @cache.register
        def test_table() -> pd.DataFrame:
            return generate_test_df("mixed")
    
        # Get the dataframe through the cache
>       result_df = cache.df_test_table

easier/tests/test_duckcacher.py:75: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
easier/duckcacher.py:371: in __getattr__
    self._store_dataframe(schema, table_name, df)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <easier.duckcacher.DuckCacher object at 0x323e7b4d0>, schema = 'main'
table = 'test_table'
df =    id     name  score
0   1    Alice   95.5
1   2      Bob   88.0
2   3  Charlie   92.5

    def _store_dataframe(self, schema: str, table: str, df: "pd.DataFrame") -> None:
        """Store a dataframe in the database and optionally in memory."""
        self._ensure_schema(schema)
>       with duckdb.connect(self.file_name) as conn:
E       NameError: name 'duckdb' is not defined

easier/duckcacher.py:180: NameError
____________________________ test_register_as_basic ____________________________

temp_db = '/var/folders/x_/xkyvlnxj07v9tf_8sxj2yq8r0000gn/T/tmpggk_mp6p/test.db'

    def test_register_as_basic(temp_db):
        """Test that register_as correctly stores and returns dataframes with custom table names."""
        cache = DuckCacher(temp_db)
    
        @cache.register_as("custom_table")
        def some_function() -> pd.DataFrame:
            return generate_test_df("mixed")
    
        # Get the dataframe through the cache using the custom name
>       result_df = cache.df_custom_table

easier/tests/test_duckcacher.py:95: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
easier/duckcacher.py:371: in __getattr__
    self._store_dataframe(schema, table_name, df)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <easier.duckcacher.DuckCacher object at 0x324b16900>, schema = 'main'
table = 'some_function'
df =    id     name  score
0   1    Alice   95.5
1   2      Bob   88.0
2   3  Charlie   92.5

    def _store_dataframe(self, schema: str, table: str, df: "pd.DataFrame") -> None:
        """Store a dataframe in the database and optionally in memory."""
        self._ensure_schema(schema)
>       with duckdb.connect(self.file_name) as conn:
E       NameError: name 'duckdb' is not defined

easier/duckcacher.py:180: NameError
_________________ test_register_as_function_name_independence __________________

temp_db = '/var/folders/x_/xkyvlnxj07v9tf_8sxj2yq8r0000gn/T/tmpwy3on555/test.db'

    def test_register_as_function_name_independence(temp_db):
        """Test that the function name doesn't affect the table name when using register_as."""
        cache = DuckCacher(temp_db)
    
        @cache.register_as("my_table")
        def completely_different_name() -> pd.DataFrame:
            return generate_test_df("numbers")
    
        # Access should work with the custom table name, not the function name
>       result_df = cache.df_my_table

easier/tests/test_duckcacher.py:115: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
easier/duckcacher.py:371: in __getattr__
    self._store_dataframe(schema, table_name, df)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = <easier.duckcacher.DuckCacher object at 0x324b62ea0>, schema = 'main'
table = 'completely_different_name'
df =    id  value
0   1   10.5
1   2   20.5
2   3   30.5

    def _store_dataframe(self, schema: str, table: str, df: "pd.DataFrame") -> None:
        """Store a dataframe in the database and optionally in memory."""
        self._ensure_schema(schema)
>       with duckdb.connect(self.file_name) as conn:
E       NameError: name 'duckdb' is not defined

easier/duckcacher.py:180: NameError
=========================== short test summary info ============================
FAILED easier/tests/test_duckcacher.py::test_register_decorator - NameError: ...
FAILED easier/tests/test_duckcacher.py::test_register_as_basic - NameError: n...
FAILED easier/tests/test_duckcacher.py::test_register_as_function_name_independence
!!!!!!!!!!!!!!!!!!!!!!!!!! stopping after 3 failures !!!!!!!!!!!!!!!!!!!!!!!!!!!
================= 3 failed, 56 deselected, 1 warning in 2.60s ==================
